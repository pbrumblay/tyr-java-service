plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.tyrconsulting'
version = '1.0.0'  

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
    maven {
        def repoUrl = project.findProperty('mavenRepoUrl') ?: 'https://repo.maven.apache.org/maven2/'
        println "Using Maven repository URL: ${repoUrl}"
        url repoUrl
    }
    gradlePluginPortal {
        url = project.findProperty('gradlePluginPortalUrl') ?: 'https://plugins.gradle.org/m2'
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
	compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def buildVersion = "${version}-${getGitHash()}"

tasks.jar {
    // Disable the plain jar
    enabled = false
}

tasks.register('fatJar', Jar) {
    archiveClassifier = '' // This removes any classifier like 'plain'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { 
            it.isDirectory() ? it : zipTree(it) 
        }
    }
    
    manifest {
        attributes 'Main-Class': 'com.tyrconsulting.tyrjavarest.Application'
    }
}

tasks.withType(Jar) {
    manifest {
        attributes(
            'Implementation-Version': buildVersion,
            'Git-Commit': getGitHash(),
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}